services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CFG_LISTENERS: 'PLAINTEXT://:29092,CONTROLLER://:9093,EXTERNAL://:9092'
      KAFKA_CFG_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,EXTERNAL://localhost:9092'
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_CFG_NODE_ID: '1'
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - crypto-net
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  init-kafka:
    image: bitnami/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        until kafka-topics.sh --bootstrap-server kafka:29092 --list; do
          echo '... still waiting for Kafka';
          sleep 2;
        done;
        echo 'Kafka is ready! Creating topics...' &&
        
        kafka-topics.sh --create --if-not-exists --topic crypto_klines_historical_btcusdt_1d --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        kafka-topics.sh --create --if-not-exists --topic crypto_klines_stream_btcusdt_1m --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        kafka-topics.sh --create --if-not-exists --topic crypto_klines_stream_ethusdt_1m --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        
        echo 'Topics created successfully.'
      "
    networks:
      - crypto-net

  data-collector:
    build:
      context: .
      dockerfile: ./docker/Ingestion/Dockerfile
    container_name: data-collector
    depends_on:
      - init-kafka
    env_file:
      - .env
    volumes:
      - ./src:/app/src
      - ./test.py:/app/test.py
    networks:
      - crypto-net

networks:
  crypto-net:
    driver: bridge

volumes:
  kafka_data: